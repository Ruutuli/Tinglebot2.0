---
description: 
globs: 
alwaysApply: false
---
# Inventory Sync Requirements

## Overview
All commands that interact with character inventory or perform inventory-dependent actions must validate that the character's inventory is properly synced before proceeding.

## Implementation Pattern

### Required Utility Function
All inventory sync checks must use the utility function from [characterUtils.js](mdc:utils/characterUtils.js):
```javascript
const { checkInventorySync } = require('../../utils/characterUtils');
```

### Validation Pattern
1. Fetch character(s) first
2. Check inventory sync before any inventory operations
3. Handle sync errors in try/catch blocks
4. For multi-character operations, check all involved characters

### Example Implementation
```javascript
try {
  const character = await fetchCharacterByName(characterName);
  if (!character) {
    return interaction.reply({
      content: `❌ Character **${characterName}** not found.`,
      ephemeral: true
    });
  }

  // Check inventory sync before proceeding
  await checkInventorySync(character);

  // Proceed with command logic...
} catch (error) {
  handleError(error, 'commandName.js');
  return interaction.reply({
    content: `❌ An error occurred: ${error.message}`,
    ephemeral: true
  });
}
```

## Replacing Existing Checks

### Old Pattern to Replace
```javascript
if (!character.inventorySynced) {
  await interaction.editReply({
    content: `❌ **${character.name}'s inventory is not set up yet.**\n` +
      `Please run \`/testinventorysetup\` and then \`/syncinventory\` to initialize your inventory.`,
    ephemeral: true,
  });
  return;
}
```

### New Pattern to Use
```javascript
try {
  await checkInventorySync(character);
} catch (error) {
  await interaction.editReply({
    content: error.message,
    ephemeral: true
  });
  return;
}
```

### Files to Update
The following files need to be updated to use the new pattern:
- [heal.js](mdc:commands/jobs/heal.js) - Healing operations
- [travel.js](mdc:commands/world/travel.js) - Travel operations
- [raid.js](mdc:commands/world/raid.js) - Raid operations
- [viewinventory.js](mdc:commands/inventory/viewinventory.js) - Inventory viewing
- [steal.js](mdc:commands/jobs/steal.js) - Stealing operations
- [item.js](mdc:commands/inventory/item.js) - Item operations
- [gear.js](mdc:commands/inventory/gear.js) - Gear operations
- [crafting.js](mdc:commands/jobs/crafting.js) - Crafting operations
- [economy.js](mdc:commands/economy/economy.js) - Economy operations
- [explore.js](mdc:commands/exploration/explore.js) - Exploration operations
- [pet.js](mdc:commands/companions/pet.js) - Pet operations
- [mount.js](mdc:commands/companions/mount.js) - Mount operations

## Commands Requiring Sync Check

### Single Character Commands
- [gather.js](mdc:commands/jobs/gather.js) - Gathering resources
- [combat.js](mdc:commands/world/combat.js) - Combat actions
- [spiritOrb.js](mdc:commands/inventory/spiritOrb.js) - Spirit orb interactions
- [relic.js](mdc:commands/inventory/relic.js) - Relic operations

### Multi-Character Commands
- [deliver.js](mdc:commands/jobs/deliver.js) - Delivery jobs (checks sender, courier, and recipient)

## Error Handling
The `checkInventorySync` utility throws an error with the message:
```
❌ This character's inventory is not synced. Please use `/testinventorysetup` to sync your inventory before using this command.
```

All commands must:
1. Catch this error in their try/catch blocks
2. Display the error message to the user
3. Prevent any inventory operations if sync check fails

## Best Practices
1. Always check sync before any inventory operations
2. Use the utility function - do not implement custom sync checks
3. For multi-character operations, check all characters before proceeding
4. Handle sync errors gracefully with user-friendly messages
5. Log sync-related errors for debugging
6. Remove any old inventory sync checks when updating files
7. Ensure the utility function is imported at the top of the file
8. Place sync checks after character validation but before any inventory operations

## Avoiding Duplicate Checks
1. Use ONLY the `checkInventorySync` utility function for all inventory sync validation
2. Remove any direct checks of `character.inventorySynced` property
3. Remove any custom inventory sync validation logic
4. Do not implement multiple sync checks in different parts of the same command
5. For multi-character operations, check all characters in a single try/catch block
6. If you find duplicate sync checks in a file:
   - Keep only the first check that uses the utility function
   - Remove any subsequent checks
   - Ensure the remaining check is placed after character validation but before any inventory operations
7. When reviewing code, look for:
   - Direct property checks (`if (!character.inventorySynced)`)
   - Custom validation logic
   - Multiple sync checks in different parts of the same command
   - Old error messages about inventory setup





