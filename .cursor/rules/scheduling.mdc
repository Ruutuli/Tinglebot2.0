---
description: 
globs: 
alwaysApply: false
---
# Scheduling and Expiration System

## Overview
The bot uses a centralized scheduling system to manage various timed tasks and request expirations. All scheduled tasks are managed through [scheduler.js](mdc:scheduler.js).

## Scheduled Tasks
Tasks run at specific times using cron expressions:

- `0 8 * * *` (8 AM daily):
  - Daily stamina recovery
  - Weather updates
  - Request expiration checks and cleanup
  - Vending stock updates

- `0 0 * * *` (Midnight daily):
  - Jail release checks
  - Debuff expiry checks
  - Birthday announcements

- `0 0 1 * *` (First of each month):
  - Monthly vending stock generation

- `0 0 * * 0` (Weekly):
  - Pet rolls reset

- `0 20 * * *` (8 PM daily):
  - Blight roll call
  - Check for missed blight rolls

## Request Expiration System
Requests expire based on their type. The system is managed through:

- [TempDataModel.js](mdc:models/TempDataModel.js): Defines the data structure and expiration logic
- [expirationHandler.js](mdc:utils/expirationHandler.js): Handles expiration checks and notifications

### Expiration Process
1. Requests are stored with an `expiresAt` timestamp
2. System checks for expired requests daily at 8 AM
3. Users are notified via DM when their requests expire
4. Expired requests are automatically deleted

### Request Types and Expiration Periods
- Healing requests: 48 hours
- Vending requests: 48 hours
- Boosting requests: 48 hours
- Battle progress: 48 hours
- Mount encounters: 48 hours
- Blight healing requests: 30 days
- Travel cooldowns: 48 hours
- Gathering cooldowns: 48 hours
- Monthly encounter tracking: End of month
- Delivery requests: 48 hours

### Notification System
The system sends customized DM notifications for each type of expired request:

```javascript
// Example notification messages
case 'healing':
  message = `Your healing request for ${data.characterName} has expired after 48 hours without being fulfilled.`;
case 'vending':
  message = `Your vending request for ${data.characterName} has expired after 48 hours without being fulfilled.`;
case 'battle':
  message = `Your battle progress for ${data.characterName} has expired after 48 hours without being completed.`;
// etc...
```

Features:
- Customized messages for each request type
- Includes character name in notifications
- Handles DM failures gracefully
- Logs all notification attempts
- Continues processing other requests if one fails

## Error Handling
All scheduled tasks use the `createCronJob` function which provides:
- Standardized error handling
- Logging
- Timezone support (default: America/New_York)

## Adding New Scheduled Tasks
To add a new scheduled task:
1. Create the task function
2. Add it to `initializeScheduler` in [scheduler.js](mdc:scheduler.js)
3. Use the `createCronJob` function with appropriate cron expression
4. Include error handling and logging

Example:
```javascript
createCronJob('0 8 * * *', 'task name', () => yourTaskFunction());
```






