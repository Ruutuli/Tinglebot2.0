---
description: 
globs: 
alwaysApply: false
---
# Village System Guide

## Overview
The village system manages three villages (Rudania, Inariko, and Vhintl) with leveling, resource management, and damage mechanics.

## Core Files
- [models/VillageModel.js](mdc:models/VillageModel.js) - Defines village schema and configuration
- [modules/villageModule.js](mdc:modules/villageModule.js) - Handles village operations
- [commands/world/village.js](mdc:commands/world/village.js) - Discord commands for village management

## Village States
1. **Levels (1-3)**
   - Each level has specific health, protection, and material requirements
   - Level 1: Basic protection, 100 HP
   - Level 2: Random raid protection, 200 HP, 10% vending discount
   - Level 3: Blood moon protection, 300 HP, 20% vending discount

2. **Status Types**
   - `upgradable`: Village can be upgraded
   - `damaged`: Village needs repair
   - `max`: Village at maximum level

## Resource Management
1. **Materials**
   - Each village has unique material requirements
   - Materials are stored in a Map with current and required values
   - When leveling down, materials are reinitialized for the new level

2. **Tokens**
   - Required for upgrades
   - Level 2: 10,000 tokens
   - Level 3: 50,000 tokens

## Damage System
1. **Health**
   - Each level has maximum health
   - Damage is calculated based on monster tier
   - Health can't go below 0

2. **Level Down**
   - Occurs when health reaches 0
   - Resets all resources
   - Reinitializes materials for new level
   - Updates vending tier and protection status

## Protection System
1. **Raid Protection**
   - Level 1: No protection
   - Level 2: Protected from random raids
   - Level 3: Protected from all raids

2. **Blood Moon Protection**
   - Only available at Level 3
   - Provides complete raid immunity

## Vending System
1. **Tiers**
   - Level 1: Basic stock
   - Level 2: Mid-tier stock (-10% cost)
   - Level 3: Rare stock (-20% cost)

## Best Practices
1. Always check village status before operations
2. Use proper error handling for village operations
3. Maintain material requirements when leveling
4. Update all related systems when village state changes
5. Log all significant village state changes

## Common Operations
1. **View Village**
   ```js
   const village = await Village.findOne({ name: villageName });
   ```

2. **Level Down**
   ```js
   village.level -= 1;
   village.health = village.levelHealth[village.level.toString()];
   // Reinitialize materials
   ```

3. **Apply Damage**
   ```js
   const damageAmount = Math.ceil(monster.tier * 1.5);
   village.health = Math.max(0, village.health - damageAmount);
   ```

## Error Handling
1. Always wrap village operations in try/catch
2. Validate village existence before operations
3. Check for valid configuration
4. Log all errors with context
5. Handle edge cases (e.g., lowest level)

