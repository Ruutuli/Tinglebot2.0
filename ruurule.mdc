---
description:
globs:
alwaysApply: false
---
# Project Coding Guide

> For use in Node.js + Discord.js projects with CommonJS module system.

---

## General Rules

- Use CommonJS (`require`, `module.exports`)
- Use Node.js latest LTS + discord.js latest stable
- Modern ES6+ only:
  - `const` / `let` (never `var`)
  - Arrow functions
  - `async/await` only
  - Template literals
  - Destructuring (objects/arrays)
- Never change functionality unless explicitly told
- Never assume setup — warn clearly
- Validate all inputs
- All user replies should be markdown-formatted
- Skip explanations unless asked
- Reuse existing files before creating new ones

---

## Import Organization

Group and alphabetize:

1. Standard Libraries (e.g., `fs`, `path`)
2. Discord.js Components
3. Database Connections
4. Database Services
5. Custom Modules
6. Utility Functions
7. Database Models
8. External API Integrations

Add blank line between groups and remove unused imports.

---

## File Structure

1. Imports  
2. Constants / Config  
3. Setup / Initialization  
4. Event Listeners  
5. Core Functional Logic (grouped by feature)  
6. `module.exports` (always last)

---

## Commenting Format

### Section Comment

```js
// ============================================================================
// Section Title
// Description of what this section handles.
// ============================================================================
```

### Function Comment

```js
// Function: doThing
// Handles X functionality with validation
```

Use `//` only (never `/* */`) and every function must have a one-liner summary.

---

## Style Rules

- 2 spaces per indent  
- Always use semicolons  
- Always use `{}` braces  
- Early returns preferred  
- Clarity over cleverness

---

## Logging Rules

### Format
```js
console.log(`[filename.js]: emoji Message`);
console.error(`[filename.js]: ❌ Error message: ${error.message}`);
```

### Emoji Usage
- ❌ Error messages
- ✅ Success/completion
- 📊 Data operations
- 💀 KO/death events
- ⚔️ Battle events
- 🎲 Random rolls
- 💥 Damage
- ❤️ Hearts
- 👤 Characters
- 🐉 Monsters
- 🤖 Bot status
- 🚀 Operational status
- 📝 User input
- 🔄 State changes
- ⚠️ Warnings
- 🔍 Debug info

### Log Levels
1. `console.error()` - Errors and exceptions
2. `console.warn()` - Warnings and potential issues
3. `console.log()` - Important state changes
4. `console.debug()` - Detailed debugging (if needed)

### Best Practices
- Always include filename in brackets
- Use appropriate emoji for context
- Keep messages concise
- Log only important state changes
- Include relevant IDs/names
- Use template literals for variables
- Group related logs together
- Avoid logging sensitive data
- Use consistent emoji across similar events

### Error Logging
```js
try {
  // Operation
} catch (error) {
  handleError(error, 'filename.js');
  console.error(`[filename.js]: ❌ Operation failed: ${error.message}`);
  throw error;
}
```

### State Change Logging
```js
console.log(`[filename.js]: 🔄 State changed - ${oldValue} → ${newValue}`);
```

### User Action Logging
```js
console.log(`[filename.js]: 👤 User ${userId} performed ${action}`);
```

---

## Logging & Error Handling

Use:

```js
console.log("[filename.js]: Message");
console.error("[filename.js]: Error message", error);
```

- Wrap all async logic in try/catch
- Never silently fail
- Re-throw only if needed upstream

---

## User-Facing Messages

```js
return interaction.reply("Invalid input. Please try again.");
```

- Markdown-formatted  
- Friendly tone

---

## Refactoring Rules

- Do not change logic unless told  
- Group related logic  
- Extract helpers only if reused  
- Remove:
  - Dead code  
  - Redundant checks  
  - Unused imports  
- Comment every function  
- Keep I/O shape the same unless allowed

---

## Optimization Rules

- Reduce DB/API calls  
- Flatten nested logic  
- Avoid growing arrays in loops  
- Use change comments:

```js
// Optimization: reduced calls from 3 to 1
```

Never sacrifice readability for performance

---

## Commit Summary Format

```md
Commit Notes:
fix: Fixed bug in [function]
feat: Added new [feature]
refactor: Restructured logic in [function]
docs: Updated comments or section headers
style: Alphabetized imports, formatting only
perf: Optimized [logic area]
```

---

## Bug Fixing Instructions

- Validate inputs  
- Wrap async in try/catch  
- Reproduce bug before & after fix  
- Use [filename.js] tags  
- Don't touch unrelated logic  

---

## Refactoring Instructions

- Maintain all behavior  
- Group similar logic  
- Abstract only if reused  
- No risky refactors without tests  

---

## Optimization Instructions

- Minimize calls  
- Reduce nesting  
- Avoid unnecessary memory growth  
- Comment performance gains  

---

## Testing Instructions (Optional)

- 1 edge case + 1 normal case  
- Use basic mocks  
- Keep tests simple and readable
